import { type NextPage } from "next";
import { useState } from "react";
import Head from "next/head";
import Map from "~/components/MapSvg.lyon";
import { ZONES } from "~/data/data.global";

import { api } from "~/utils/api";

export const getServerSideProps = ({
  params,
}: {
  params: { zone: string };
}) => {
  return {
    props: {
      zone: params.zone,
    },
  };
};

type Props = {
  zone: string;
};

/**
 * Zone
 * @param zone
 * @returns
 */
const Zone: NextPage<Props> = ({ zone }) => {
  const [currentStat, setCurrentStat] = useState<number>(0);
  const map = api.cities.getMap.useQuery({ zone });
  const statData =
    api.cities.getStatById.useQuery({ zone, id: currentStat })?.data || [];
  const zoneLabel = ZONES.find((z) => z.name === zone)?.label;
  const stats = api.cities.getStats.useQuery({ zone });
  const categories =
    stats.data?.reduce<string[]>((acc, stat) => {
      if (!acc.includes(stat.category)) {
        acc.push(stat.category);
      }
      return acc;
    }, []) || [];
  const title = `Statistiques ${zoneLabel || ""}`;

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Statistiques{" "}
            <span className="text-[hsl(280,100%,70%)]">{zoneLabel}</span>
          </h1>
          <select
            className="rounded-md border border-white bg-transparent text-white"
            onChange={(event) => {
              setCurrentStat(parseInt(event.target.value, 10));
            }}
          >
            <option key="empty" value="">
              SÃ©lectionner une statistique
            </option>
            {stats.data &&
              categories.map((currentCategory) => (
                <optgroup key={currentCategory} label={currentCategory}>
                  {stats.data.map(({ category, id, name, year }) => {
                    if (category === currentCategory)
                      return (
                        <option key={`${name} ${year}`} value={id}>
                          {name} ({year})
                        </option>
                      );
                  })}
                </optgroup>
              ))}
          </select>
          {zone === "lyon" && (
            <Map
              cities={map.data ? map.data.cities : []}
              districts={map.data ? map.data.districts : []}
              stats={statData}
            />
          )}
        </div>
      </main>
    </>
  );
};

export default Zone;
